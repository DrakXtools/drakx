#!/usr/bin/perl

use lib "../perl-install";
use common;
use pkgs;

my @ALLOWED_LANGS = split(' ', first(cat_('move.pm') =~ /ALLOWED_LANGS = qw\((.*)\)/));
my @langs = map { /^../; $& } @ALLOWED_LANGS;

@ARGV <= 1 or die "usage: make_live [live_location=/tmp/live_tree]\n";

my $kernel_version = '2.4.22.21.1mdk';

sub installPackages {
    output_p("$::prefix/etc/rpm/macros", "%_install_langs " . join(":", @langs) . "\n");
    rename '/etc/rpm/macros', '/etc/rpm/macros.';
    system('cp', "$::prefix/etc/rpm/macros", '/etc/rpm/macros');

    mkdir_p("$::prefix/var/lib/rpm");
    mkdir_p("$::prefix/root/drakx");


    undef *install_any::setDefaultPackages;
    *install_any::setDefaultPackages = sub {};

    undef *install_any::getFile;
    *install_any::getFile = sub {
	my ($f, $o_method) = @_;
	log::l("getFile $f:$o_method");
	open(my $F, '/export/' . install_any::relGetFile($f)) or return;
	$F;
    };
    install_any::setPackages(my $o = $::o = { 
					     prefix => $::prefix, 
					     meta_class => 'desktop', 
					     default_packages => [
                                 qw(XFree86-server XFree86-xfs XFree86-FBDev),
				 qw(openssh-server), #- fred wants it
				 qw(alsa-utils),
				 qw(davfs nfs-utils samba-server sane-backends xsane xsane-gimp),
                                 qw(acpi acpid), #- so that removing acpi=ht will work
				 qw(mountloop),	#- crypted folders
				 qw(dnotify),	#- notification of /etc changes
				 qw(mandrake_doc-en),	#- doesn't get installed by DOCS :/
				 qw(zcip dhcp-client dhcpcd ppp kdenetwork-kppp rp-pppoe pptp-adsl speedtouch speedtouch_mgmt nfs-utils-clients samba-client tmdns wireless-tools adiusbadsl pcmcia-cs), #- network conf
                                 qw(cups cups-drivers foomatic-db gimpprint hpoj libnet-snmp mtools mtoolsfm nmap printer-filters printer-testpages printer-utils scli xojpanel xpp), #- printer stuff
				 qw(ATI_GLX NVIDIA_GLX),
                                 "kernel-smp-$kernel_version",
				 qw(hcfpcimodem hsflinmodem ltmodem), "NVIDIA_nforce-$kernel_version",
				 qw(xinput), #- for some mice
                                 qw(perl-Term-Readline-Gnu binutils),  #- allow debugging move
                                 qw(openssh-askpass-gnome),  #- openssh-askpass for mountloop doesn't allow to click on ok/cancel buttons
                                                                 ],
					    });

    my %compssUsersChoice = map { $_ => 1 } map { @{$_->{flags}} } values %{$o->{compssUsers}};
    $compssUsersChoice{$_} = 1 foreach 'SYSTEM', 'DVD', 'USB', 'SOUND', 'BURNER', 'UTF8', 'DOCS', 'TV', '3D', 'INSTALL';
    $compssUsersChoice{qq(LOCALES"$_")} = 1 foreach @langs;

    pkgs::setSelectedFromCompssList($o->{packages}, \%compssUsersChoice, 4, 0);

    my @toInstall = pkgs::packagesToInstall($o->{packages});
    local $ENV{DURING_INSTALL} = 1;
    $ENV{LD_LIBRARY_PATH} = "/lib:/usr/lib:/usr/X11R6/lib:/usr/lib/qt3/lib";
    pkgs::install($::prefix, 0, \@toInstall, $o->{packages});

    eval { fs::umount("$::prefix/proc") };

    unlink "/etc/rpm/macros";
    rename "/etc/rpm/macros.", "/etc/rpm/macros";
}

sub config_X_proprietary_drivers {
    unlink "$::prefix/usr/lib/libGL.so";

    my %name_to_Driver = (NVIDIA_GLX => 'nvidia', ATI_GLX => 'fglrx');

    my $lib = 'libGL.so.1';
    symlinkf("/etc/X11/$lib", "$::prefix/usr/lib/$lib");
    foreach (keys %name_to_Driver) {
	my ($full_name) = run_program::rooted_get_stdout($::prefix, 'rpm', '-ql', $_) =~ m!/usr/lib/(\Q$lib\E\..*)! or die '';
	symlinkf($full_name, "$::prefix/usr/lib/$lib.$name_to_Driver{$_}");
    }
    #- remove the dirty hack done by NVIDIA_kernel-xxx proprietary package
    #- we do it by hand when needed
    substInFile { $_ = '' if /^nvidia$/ } "$::prefix/etc/modules";
}
my $cwd = chomp_(`pwd`);
$::prefix = $ARGV[0] || '/tmp/live_tree';
print "Making live in $::prefix directory.\n";

{
    eval { fs::umount("$::prefix/proc") };
#    eval { rm_rf($::prefix) };
    output_p("$::prefix/etc/fstab", "none /proc proc defaults 0 0\n");
    installPackages();
    run_program::rooted($::prefix, 'ldconfig');
    touch("$::prefix/etc/menu/enable_simplified");
    $ENV{LC_ALL} = 'en_US'; #- update-menus doesn't work when there is no locale (aka locale "C")
    run_program::rooted($::prefix, 'update-menus', '-n');
    run_program::rooted($::prefix, 'fc-cache');  #- generate cache in all directories mentioned in config file

    run_program::rooted($::prefix, 'nspluginscan'); #- must be run before kbuildsycoca for the ksycoca to be flash plugin aware

    $ENV{HELP_BROWSER} = "kfmclient openProfile webbrowsing";
    $ENV{BROWSER} = "kfmclient openProfile webbrowsing";
    $ENV{DESKTOP} = "kde";
    foreach (@ALLOWED_LANGS) {
	$ENV{LC_ALL} = $_;
	run_program::rooted($::prefix, 'kbuildsycoca');
	cp_af("$::prefix/tmp/kde-root/ksycoca", "$::prefix/usr/share/services/ksycoca-$_");
    }

    eval { rm_rf("$::prefix/lib/i686") }; # de-complexify, use the default on any arch

    symlinkf("/etc/X11/ksycoca", "$::prefix/usr/share/services/ksycoca");

    eval { config_X_proprietary_drivers() };

    unlink "$::prefix/usr/share/autostart/$_.desktop" foreach 'klipper', 'korgac', 'kalarmd.autostart';
}

update_gnomekderc("$::prefix/usr/share/config/kdesktoprc", ScreenSaver => (Lock => 'true'));

symlinkf('/var/lib/xkb', "$::prefix/etc/X11/xkb/compiled"); # don't want the relative path, prefering the absolute path

substInFile {
    #- /lib is ro, for the moment we don't save, we'll see later if we may want to save (using /var/dev-state for example)
    s|.*lib/dev-state.*||;
} "$::prefix/etc/devfsd.conf";

substInFile {
    #- don't use shadow passwords since pwconv overwrites /etc/shadow hence contents will be lost for usb key
    s|\s*shadow||;
} "$::prefix/etc/pam.d/system-auth";

substInFile {
    s|Mandrake Linux release (\S+) \(.*\)|Mandrake Move release $1 (Moyoto)|;
} "$::prefix/etc/mandrake-release";

#- remove uncessary wizards, especially from appearing in MCC
unlink "$::prefix/usr/sbin/$_" foreach qw(drakautoinst drakboot drakfloppy drakgw drakedm drakfont rpmdrake MandrakeUpdate rpmdrake-remove edit-urpm-sources.pl);
unlink "$::prefix/usr/bin/$_" foreach qw(userdrake);

#- remove services we start ourselves from chkconfig system
substInFile {
    s|chkconfig:|chkconfig-disabled:|;
} "$::prefix/etc/rc.d/init.d/$_" foreach qw(xfs dm devfsd syslog);

#- we're not using sysv init, we need to replace these
unlink "$::prefix/sbin/$_" foreach qw(halt reboot);

#- provide a way for speedtouch users of free version to escape
if (!-e "$::prefix/usr/share/speedtouch/mgmt.o") {
    symlink '/etc/mgmt.o', "$::prefix/usr/share/speedtouch/mgmt.o";
}

#- CD-based applications
substInFile {
    foreach my $app (qw(kaudiocreator kscd k3b)) {
        s|.*command="$app".*||;
    }
} "$::prefix/usr/lib/menu/simplified/mandrake_desk";

#- Xsession wants to start first-time
unlink "$::prefix/usr/X11R6/bin/drakfw";

substInFile {
    s|startkde|startkde_move|;
} "$::prefix/etc/X11/wmsession.d/01KDE";
