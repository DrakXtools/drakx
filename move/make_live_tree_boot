#!/usr/bin/perl

use MDK::Common;

my $prefix = '/tmp/live_tree';

sub create_light_tree {
    my ($live_name, $list) = @_;
    my $light_prefix = $prefix . '_' . $live_name;

    -e $light_prefix and die "you can't make_live_tree_boot since one already exists
Maybe you should remove it first with 'make_live_tree_boot -u'\n";

    foreach my $orig (@$list) {
	my $dest = $orig;
	$dest =~ s|^$prefix|$light_prefix|;

	if (-l $orig) {
	    system('cp', '-a', $orig, $dest);
	} else {
	    my $link = $orig;
	    $link =~ s|^$prefix|/image_$live_name|;

	    mkdir_p(dirname($dest));
	    rename $orig, $dest or die "moving $orig to $dest failed: $!\n";

	    symlink $link, $orig or die "symlinking from $dest to $orig failed: $!\n";
	}
    }

    if ($live_name eq 'totem') {
	foreach my $dir ('/usr/share', '/usr/lib', '/usr/bin', '/usr') {
	    foreach my $f (all("$prefix$dir")) {
		my $file = "$prefix$dir/$f";
		my $link = readlink($file) =~ /^\w/ ? readlink($file) : "/image$dir/$f";
		symlink $link, "$light_prefix$dir/$f";
	    }
	}
    }
}

sub remove_light_tree {
    my ($live_name, $list) = @_;
    my $light_prefix = $prefix . '_' . $live_name;

    -d $light_prefix or return;

    foreach my $dest (@$list) {
	my $orig = $dest;
	$orig =~ s|^$prefix|$light_prefix|;

	if (-l $orig) {
	    unlink $orig;
	} elsif (-e $orig) {
	    if (-e $dest && -s $dest != -s $orig) {
		warn "ERROR: $dest already exist, skipping\n";
	    } elsif (!-d $dest || -l $dest) {
		unlink $dest or die "removing $dest failed: $!\n";
		rename $orig, $dest or die "moving $orig to $dest failed: $!\n";
	    }
	}
    }
    rmdir($_) foreach reverse(chomp_(`find $light_prefix -type d`));

    if (-e $light_prefix) {
	unlink($_) foreach chomp_(`find $light_prefix -type l`);

	foreach my $orig (chomp_(`find $light_prefix -type f`)) {
	    my $dest = $orig;
	    $dest =~ s|^$light_prefix|$prefix|;
	    if (my $orig2 = readlink($dest)) {
		$orig2 =~ s!/image_$live_name/!$light_prefix/! or next;
		$orig2 eq $orig or next;
	    } else {
		next if -e $dest && -s $dest != -s $orig;
	    }
	    unlink $dest or die "removing $dest failed: $!\n";
	    rename $orig, $dest or die "moving $orig to $dest failed: $!\n";
	}
	system("rm -rf $light_prefix/usr/bin/stage2/*.pm");
	system("rm -rf $light_prefix/usr/lib/libDrakX/*.pm");
	system("rm -rf $light_prefix/usr/share/langs/*.png");

	rmdir($_) foreach reverse(chomp_(`find $light_prefix -type d`));
    }

    if (-e $light_prefix) {
	print "still there:\n";
	system('find', $light_prefix);
    }
}

my @always_list = chomp_(cat_('data/always.list'));
my @boot_list = chomp_(cat_('data/boot.list'));
my @totem_list = chomp_(cat_('data/totem.list'));

@always_list = uniq(@always_list, intersection(\@boot_list, \@totem_list));

@boot_list = difference2(\@boot_list, \@always_list);
@totem_list = difference2(\@totem_list, \@always_list);

remove_light_tree('always', \@always_list);
remove_light_tree('boot', \@boot_list);
remove_light_tree('totem', \@totem_list);

if (!@ARGV) {
    create_light_tree('always', \@always_list);    
    create_light_tree('boot', \@boot_list);    
    create_light_tree('totem', \@totem_list);    
}
