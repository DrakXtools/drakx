#!/usr/bin/perl

# DiskDrake
# Copyright (C) 1999-2004 Mandrakesoft (pixel@mandrakesoft.com)
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2, or (at your option)
# any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

# DiskDrake uses resize_fat which is a perl rewrite of the work of Andrew
# Clausen (libresize).
# DiskDrake is also based upon the libfdisk and the install from Red Hat Software


use lib qw(/usr/lib/libDrakX);

use standalone;     #- warning, standalone must be loaded very first, for 'explanations'

use common;
use interactive;
use detect_devices;
use fsedit;
use fs;
use log;
use c;

$ugtk2::wm_icon = "/usr/share/mcc/themes/default/diskdrake_hd.png";

my %options;
my @l = @ARGV;
while (my $e = shift @l) {
    my ($option) = $e =~ /--?(.*)/ or next;
    if ($option =~ /(.*?)=(.*)/) {
	$options{$1} = $2;
    } else {
	$options{$option} = '';
    }
}

my @types = qw(hd nfs smb dav removable fileshare list-hd change-geometry);
my ($type, $para) = ('hd', '');
foreach (@types) {
    if (exists $options{$_}) {
        $para = delete $options{$_};
	$type = $_;
	last;
    }
}
keys %options and die "usage: diskdrake [--expert] [--testing] [--{" . join(",", @types) . "}]\n";

if ($>) {
    $ENV{PATH} = "/sbin:/usr/sbin:$ENV{PATH}";
}


my $in = 'interactive'->vnew('su');

if ($type eq 'fileshare') {
    require any;
    any::fileshare_config($in, '');
    $in->exit(0);
}

my $all_hds = fsedit::get_hds({}, $in);

fs::get_raw_hds('', $all_hds);

fs::get_info_from_fstab($all_hds, '');
fs::merge_info_from_mtab([ fs::get::really_all_fstab($all_hds) ]);

$all_hds->{current_fstab} = fs::fstab_to_string($all_hds, '');

if ($type eq 'list-hd') {
    print partition_table::description($_), "\n" foreach fs::get::fstab($all_hds);    
} elsif ($type eq 'change-geometry') {
    $para =~ s|^/dev/||;
    my ($device, undef, $heads, $sectors) = $para =~ /(.+)=(\d+,)?(\d+),(\d+)$/ or die "usage: diskdrake --change-geometry=<device>=[<cylinders>,]<heads>,<sectors>\n";
    my $hd = find { $_->{device} eq $device } @{$all_hds->{hds}};
    put_in_hash($hd->{geom}, { heads => $heads, sectors => $sectors });
    $hd->{isDirty} = 1;
    partition_table::write($hd);
} elsif ($type eq 'hd') {
    require diskdrake::interactive;
    diskdrake::interactive::main($in, $all_hds, 0, '', sub { 
                                     exec("drakhelp --id diskdrake") unless fork() });
} elsif ($type eq 'removable') {
    require diskdrake::removable;
    $para =~ s|^/dev/||;
    my ($raw_hd) = $para ?
      first(grep { $para eq $_->{device} } @{$all_hds->{raw_hds}}) || die "unknown removable $para\n" :
      $in->ask_from_listf('', '', \&diskdrake::interactive::format_raw_hd_info, $all_hds->{raw_hds}) or $in->exit(0);

    if (!$raw_hd->{mntpoint}) {
	my $mntpoint = detect_devices::suggest_mount_point($raw_hd);
	$raw_hd->{mntpoint} ||= find { !fs::get::has_mntpoint($_, $all_hds) } map { "/mnt/$mntpoint$_" } '', 2 .. 10;
	$raw_hd->{is_removable} = 1; #- force removable flag

	my $useSupermount = 'magicdev';
	require security::level;
	require lang;
	fs::mount_options::set_default($raw_hd, 
				useSupermount => $useSupermount, 
				security => security::level::get(), 
				lang::fs_options(lang::read()));
    }
    diskdrake::removable::main($in, $all_hds, $raw_hd);
} elsif ($type eq 'dav') {
    require diskdrake::dav;
    diskdrake::dav::main($in, $all_hds);
} else {
    $in->ask_warn('', "Sorry only a gtk frontend is available") if !$in->isa('interactive::gtk');
    require diskdrake::smbnfs_gtk;
    diskdrake::smbnfs_gtk::main($in, $all_hds, $type);
}

$in->exit(0);
