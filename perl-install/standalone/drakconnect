#!/usr/bin/perl

# DrakConnect

# Copyright (C) 1999-2002 MandrakeSoft (damien@mandrakesoft.com)
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2, or (at your option)
# any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

use strict;
use diagnostics;
use lib qw(/usr/lib/libDrakX);

use standalone;     #- warning, standalone must be loaded very first, for 'explanations'

use interactive;
use common;
use network::netconnect;
use network::ethernet;
use network::tools;
use network::modem;
use network;
use c;
use modules;
use network::isdn;
use network::adsl;
use MDK::Common::Globals "network", qw($in $prefix $disconnect_file $connect_prog $connect_file);

my $xpm_path = "/usr/share/libDrakX/pixmaps";
local $_ = join '', @ARGV;

my ($netcnx, $netc, $intf)  = ({}, {}, {});
my @conx_type = ('modem', 'isdn_internal', 'isdn_external', 'adsl', 'cable', 'lan');

my $in = 'interactive'->vnew('su');
!$::isEmbedded and $in->isa('interactive::gtk');
$::Wizard_pix_up = "wiz_drakconnect.png";
$::Wizard_title = "Network & Internet Configuration";

my $activate_profile = 0; #- deactivated by default (in order to keep code)

MDK::Common::Globals::init(
	      in => $in,
	      prefix => '',
	      connect_file => "/etc/sysconfig/network-scripts/net_cnx_up",
	      disconnect_file => "/etc/sysconfig/network-scripts/net_cnx_down",
	      connect_prog => "/etc/sysconfig/network-scripts/net_cnx_pg"
	     );

$::isEmbedded && ref($in) =~ /gtk/ or goto dd;

require ugtk2;
ugtk2->import(qw(:helpers :wrappers :create));
my $expert_mode = 0;
network::netconnect::read_net_conf('', $netcnx, $netc);
modules::load_category('net');
my @all_cards = network::ethernet::conf_network_card_backend($netc, $intf);
network::netconnect::load_conf($netcnx, $netc, $intf);
network::network::probe_netcnx_type('', $netc, $intf, $netcnx);

my $window1 = ugtk2->new('drakconnect');
$window1->{rwindow}->signal_connect(delete_event => sub { ugtk2->exit(0) });
unless ($::isEmbedded) {
    $window1->{rwindow}->set_position('center');
    $window1->{rwindow}->set_title(N("Network configuration (%d adapters)", @all_cards));
    $window1->{rwindow}->set_size_request(500, 400);
}
$window1->{rwindow}->set_border_width(10);

my $combo1 = new Gtk2::OptionMenu;
$combo1->set_popdown_strings(network::netconnect::get_profiles());
my $old_profile = $netcnx->{PROFILE};
$combo1->entry->set_text($netcnx->{PROFILE} || "default");
my $button_del = new Gtk2::Button(N("Del profile..."));
$button_del->signal_connect(clicked => sub {
				my $dialog = _create_dialog(N("Delete profile"));
				$dialog->vbox->pack_start(new Gtk2::Label(N("Profile to delete:")),1,1,0);
				my $combo_dialog = new Gtk2::Option_menu;
				$combo_dialog->set_popdown_strings(grep { ! /default/ } network::netconnect::get_profiles());
				$dialog->vbox->pack_start($combo_dialog,1,1,0);
				my $bbox_dialog = new Gtk2::HButtonBox;
				$dialog->action_area->add($bbox_dialog);
				$bbox_dialog->set_layout('end');
				my $button_ok = Gtk2::Button->new_from_stock('gtk-ok');
				$button_ok->signal_connect(clicked => sub {
							       network::netconnect::del_profile($netcnx, $combo_dialog->entry->get_text);
							       $netcnx->{PROFILE} eq $combo_dialog->entry->get_text and $netcnx->{PROFILE} = "default";
							       Gtk2->main_quit;
							   });
				$bbox_dialog->add($button_ok);
				my $button_cancel = Gtk2::Button->new_from_stock('gtk-cancel');
				$button_cancel->signal_connect(clicked => sub { Gtk2->main_quit });
				$bbox_dialog->add($button_cancel);
				$dialog->show_all;
				$dialog->run;
				$dialog->destroy;
				$combo1->entry->set_text(-e "/etc/sysconfig/network-scripts/drakconnect_conf." . $combo1->entry->get_text ? $combo1->entry->get_text : "default");
				$combo1->set_popdown_strings(network::netconnect::get_profiles());
				apply();
			    });
$button_del->set_sensitive(network::netconnect::get_profiles() > 1);
my $button_new = new Gtk2::Button(N("New profile..."));
$button_new->signal_connect(clicked => sub {
				my $dialog = _create_dialog("New profile...");
				$dialog->vbox->pack_start(new Gtk2::Label(N("Name of the profile to create (the new profile is created as a copy of the current one) :")),1,1,0);
				my $entry_dialog = new Gtk2::Entry;
				$dialog->vbox->pack_start($entry_dialog,1,1,0);
				my $bbox_dialog = new Gtk2::HButtonBox;
				$dialog->action_area->add($bbox_dialog);
				$bbox_dialog->set_layout('end');
				my $button_ok = Gtk2::Button->new_from_stock('gtk-ok');
				$button_ok->signal_connect(clicked => sub {
							       network::netconnect::add_profile($netcnx, $entry_dialog->get_text);
							       $netcnx->{PROFILE} = $entry_dialog->get_text;
							       Gtk2->main_quit;
							   });
				$bbox_dialog->add($button_ok);
				my $button_cancel = Gtk2::Button->new_from_stock('gtk-cancel');
				$button_cancel->signal_connect(clicked => sub { Gtk2->main_quit });
				$bbox_dialog->add($button_cancel);
				$dialog->show_all;
				$dialog->run;
				$dialog->destroy;
				$combo1->entry->set_text(-e "/etc/sysconfig/network-scripts/drakconnect_conf." . $netcnx->{PROFILE} ? $netcnx->{PROFILE} : "default");
				$combo1->set_popdown_strings(network::netconnect::get_profiles());
			    });

my $hostname = chomp_(`hostname`);
my $type_label = new Gtk2::Label($netcnx->{type});
my $int_label = new Gtk2::Label($netcnx->{type} eq 'lan' ? N("Gateway:") : N("Interface:"));
my $interface_name = new Gtk2::Label($netcnx->{type} eq 'lan' ? $netc->{GATEWAY} : $netcnx->{NET_INTERFACE});
my $isconnected = -1;
my $warning_label1 = new Gtk2::Label("");
my $int_connect = new Gtk2::Button(N("Wait please"));
$int_connect->set_sensitive(0);
$int_connect->signal_connect(clicked => sub {
    if (!$isconnected) {
        if (cat_($connect_prog) =~ m|/usr/bin/kppp| && -e '/usr/bin/kppp') {
            run_program::rooted($prefix, "/usr/bin/kppp &");
          } else {
              connect_backend();
          } 
    } else {
        disconnect_backend();
    }
    update2();
});

my $button_internet = gtksignal_connect(Gtk2::Button->new(N("Configure Internet Access...")),
                                clicked => sub { configure_net('', $netcnx, $netc, $intf) });

my $tree_model = Gtk2::TreeStore->new("Gtk2::Gdk::Pixbuf", map { "Glib::String" } 2..6);
my $list = Gtk2::TreeView->new_with_model($tree_model);
$list->append_column(Gtk2::TreeViewColumn->new_with_attributes(undef, Gtk2::CellRendererPixbuf->new, 'pixbuf' => 0));
each_index {
    $list->append_column(my $col = Gtk2::TreeViewColumn->new_with_attributes($_, Gtk2::CellRendererText->new, 'text' => $::i + 1));
    $col->set_sort_column_id($::i);
} (N("Interface"), N("IP address"), N("Protocol"), N("Driver"), N("State"));

build_list();

my $button_lan = gtksignal_connect(Gtk2::Button->new(N("Configure Local Area Network...")),
                                clicked => sub { configure_lan('', $netcnx, $netc, $intf) });

my ($bbox0, $label_host, $int_state, $button_expert);

$window1->{window}->add(
                        gtkpack_(Gtk2::VBox->new(0,10),
				 if_($activate_profile,
				     0, gtkpack_(Gtk2::HBox->new(0,0),
						 0, new Gtk2::Label(N("Profile: ")),
						 0, $combo1,
						 0, $button_del,
						 0, $button_new,
						),
				 ),
                                 0, gtkpack_(Gtk2::HBox->new(0,0),
                                             0, new Gtk2::Label(N("Hostname: ")),
                                             0, $label_host = new Gtk2::Label($hostname),
                                             ),
                                 0, gtkadd(Gtk2::Frame->new(N("Internet access")),
                                           gtkpack_(gtkset_border_width(Gtk2::VBox->new(0,0), 5),
                                                    1, gtkset_border_width(create_packtable({ col_spacings => 5, row_spacings => 5 },
                                                                                            [ new Gtk2::Label(N("Type:")), $type_label ],
                                                                                            [ $int_label, $interface_name ],
                                                                                            [ Gtk2::Label->new(N("Status:")), 
                                                                                              $int_state = Gtk2::Label->new(N("Testing your connection...")) ]
                                                                                            ),
                                                                           5),
                                                    0, $warning_label1,
                                                    0, gtkpack(Gtk2::HButtonBox->new,
                                                               $button_internet,
                                                               $int_connect,
                                                              ),
                                                    )
                                           ),
                                 1, gtkadd(Gtk2::Frame->new(N("LAN configuration")),
                                           gtkpack_(gtkset_border_width(Gtk2::VBox->new(0,0), 5),
                                                    0, $list,
                                                    0, new Gtk2::HBox(0,0),
                                                    0, gtkpack_(new Gtk2::HBox(0, 0),
                                                                0, $button_lan),
                                                    )
                                           ),
                                 0, gtkadd(Gtk2::HButtonBox->new,
                                           $button_expert = gtksignal_connect(new Gtk2::CheckButton(N("Expert Mode")),
                                                                              clicked => sub {
                                                                                  $expert_mode = $button_expert->get_active;
                                                                                  $_->set_sensitive($expert_mode) foreach $button_internet, $button_lan;
                                                                              }),
                                           gtksignal_connect(Gtk2::Button->new(N("Launch the wizard")),
                                                             clicked => sub {
                                                                 system("drakconnect&");
								 #- reload everything...
								 $netcnx = {}; $netc = {}; $intf = {};
								 network::netconnect::read_net_conf('', $netcnx, $netc);
								 modules::load_category('net');
								 @all_cards = network::ethernet::conf_network_card_backend($netc, $intf);
								 network::netconnect::load_conf($netcnx, $netc, $intf);
								 network::network::probe_netcnx_type('', $netc, $intf, $netcnx);
                                                                 $combo1->entry->set_text(-e "/etc/sysconfig/network-scripts/drakconnect_conf." . ($combo1->entry->get_text || "default"));
                                                                 update();
                                                             }),
                                           ),
                                 0, Gtk2::HSeparator->new,
                                 0, $bbox0 = new Gtk2::HButtonBox,
                                 ),
                        );


$button_expert->set_active($expert_mode);
my $button_apply = new Gtk2::Button(N("Apply"));
$button_apply->signal_connect(clicked => \&apply);
$button_apply->set_sensitive(0);
$bbox0->add($button_apply);

my $button_cancel = Gtk2::Button->new_from_stock('gtk-cancel');
$button_cancel->signal_connect(clicked => \&quit_global);
$bbox0->add($button_cancel);
my $button_ok = Gtk2::Button->new_from_stock('gtk-ok');
$button_ok->signal_connect(clicked => sub {
				 my $dialog = _create_dialog(N("Please wait"));
				 $dialog->vbox->pack_start(new Gtk2::Label(N("Please Wait... Applying the configuration")),1,1,20);
				 $dialog->show_all;
				 gtkflush();
				 apply();
				 $dialog->destroy;
				 update();
				 quit_global();
			     });
$bbox0->add($button_ok);

$combo1->signal_connect(realize => sub {
                            $combo1->entry->signal_connect(changed => sub {
                                                               #connected() and disconnect_backend();
                                                               network::netconnect::set_profile($netcnx, $combo1->entry->get_text);
                                                               network::netconnect::load_conf($netcnx, $netc, $intf);
                                                               $netcnx->{$_} = $netc->{$_} foreach qw(NET_DEVICE NET_INTERFACE);
                                                               update();
                                                               $button_apply->set_sensitive(1);
                                                           });
});

$window1->{rwindow}->show_all;
$_->set_sensitive(0) foreach $button_internet, $button_lan;
gtkflush();
my $tag = Glib::Timeout->add(4000, \&update2);
$window1->main;
ugtk2->exit(0);

dd:
$::isWizard = 1;
network::netconnect::main('', $netcnx, $in);
$in->exit(0);

sub build_list() {
    foreach my $i (0..$#all_cards) {
	my ($ip, $state);
	if (-x "/sbin/ifconfig") {
	    local $_ = `LC_ALL=C LANG=C LANGUAGE=C LC_MESSAGES=C /sbin/ifconfig "eth$i"`;
	    $ip = /inet addr:(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})/o ? $1 : N("Bad Ip");
	    $_ = `LC_ALL=C LANG=C LANGUAGE=C LC_MESSAGES=C /sbin/ifconfig`;
	    $state = /eth$i/ ? "up" : "down";
	} else {
            $ip = $intf->{"eth$i"}{IPADDR};
            $state = "n/a";
        }
        $tree_model->append_set(undef, [ map_index { $::i => $_ } (gtkcreate_pixbuf("eth_card_mini2.png"), "eth$i", $ip , $intf->{"eth$i"}{BOOTPROTO}, $all_cards[$i][1], $state) ]);
    }
}

sub apply() {
    $old_profile = $netcnx->{PROFILE} || "default";
    network::netconnect::save_conf($netcnx);

    $netcnx->{type} eq 'modem' and network::modem::ppp_configure($in, $netcnx->{$netcnx->{type}});
    $netcnx->{type} eq 'isdn_internal' and network::isdn::isdn_write_config_backend($netcnx->{$netcnx->{type}}, $netc, $netcnx); #$light
    $netcnx->{type} eq 'isdn_external' and network::modem::ppp_configure($in, $netcnx->{$netcnx->{type}});
    my $a = $netcnx->{type};
    $a =~ s/adsl_//;
    $netcnx->{type} =~ /adsl/ and network::adsl::adsl_conf_backend($netcnx->{$netcnx->{type}}, $netc, $a, $netcnx);

    $netcnx->{dhcp_client} and $netc->{dhcp_client} = $netcnx->{dhcp_client};
    network::configureNetwork2($in, $prefix, $netc, $intf);
    $netcnx->{type} =~ /adsl/ or system("/sbin/chkconfig --del adsl 2> /dev/null");
    $netcnx->{type} !~ /adsl_p/ and system("$prefix/etc/rc.d/init.d/network restart");
    $button_apply->set_sensitive(0);
}

sub ethisup { `LC_ALL=C LANG=C LANGUAGE=C LC_MESSAGES=C /sbin/ifconfig` =~ /eth$_[0]/ }

my $to_update;
sub update() {
    my $h = chomp_(`hostname`);
    $label_host->set_label($h);
    $type_label->set($netcnx->{type});
    $int_label->set($netcnx->{type} eq 'lan' ? N("Gateway:") : N("Interface:"));
    $interface_name->set($netcnx->{type} eq 'lan' ? $netc->{GATEWAY} : $netcnx->{NET_INTERFACE});
    $tree_model->clear;
    build_list();
    $button_del->set_sensitive(network::netconnect::get_profiles() > 1);
    return 1 if $isconnected == -1;
    $int_state->set($isconnected ? N("Connected") : N("Not connected"));
    $int_connect->child->set($isconnected ? N("Disconnect...") : N("Connect..."));
    $int_connect->set_sensitive(1);
    1;
}

sub in_ifconfig {
    my ($intf) = @_;
    -e '/sbin/ifconfig' or return 1;
    $intf eq '' and return 1;
    `/sbin/ifconfig` =~ /$intf/;
}

sub update2() {
    undef $to_update;
    connected_bg(\$to_update);
    if (defined $to_update) {
        $isconnected = $to_update;
        if ($isconnected != -1) {
            if ($isconnected && !in_ifconfig($netcnx->{NET_INTERFACE})) {
                $warning_label1->set(N("Warning, another Internet connection has been detected, maybe using your network"));
                $isconnected = 0;
            } else { $warning_label1->set("") }
            $int_state->set($isconnected ? N("Connected") : N("Not connected"));
            $int_connect->child->set($isconnected ? N("Disconnect...") : N("Connect..."));
            $int_connect->set_sensitive(1);
        }
    }
    update();
    1;
}

sub quit_global() {
    ugtk2->exit(0);
}

sub configure_lan {
    my ($prefix, $netcnx, undef, $intf) = @_;
    my $window = _create_dialog(N("LAN configuration"));
    my @card_tab;

    if (@all_cards < 1) {
	$window->vbox->pack_start(new Gtk2::Label(N("You don't have any configured interface.
Configure them first by clicking on 'Configure'")),1,1,0);
	$window->action_area->add(gtkadd(gtkset_layout(Gtk2::HButtonBox->new, 'end'),
                                         gtksignal_connect(Gtk2::Button->new_from_stock('gtk-ok'),
                                                           clicked => sub { Gtk2->main_quit })
                                         )
                                  );
	$window->show_all;
	$window->run;
	$window->destroy;
	return;
    }

    $window->set_border_width(10);
    
    $window->vbox->pack_start(my $vbox0 = new Gtk2::VBox(0,0),
                              1, 1, 0,
                             );
    $vbox0->pack_start(new Gtk2::Label(N("LAN Configuration")),0,1,0);
    my $notebook = new Gtk2::Notebook;
    $vbox0->pack_start($notebook,0,1,0);
    foreach (0..$#all_cards) {
	my @infos;
	my @conf_data;
	$card_tab[2*$_] = \@infos;
	$card_tab[2*$_+1] = \@conf_data;
	my $vbox_local = new Gtk2::VBox(0,0);
	$vbox_local->set_border_width(10);
	$vbox_local->pack_start(new Gtk2::Label(N("Adapter %s: %s", $_+1 , "eth$_")),1,1,0);
	#	Eth${_}Hostname = $netc->{HOSTNAME}
	#       Eth${_}HostAlias = " . do { $netc->{HOSTNAME} =~ /([^\.]*)\./; $1 } . "
	#	Eth${_}Driver = $all_cards[$_]->[1]
        @conf_data = ([N("IP address"), \$intf->{"eth$_"}{IPADDR}],
			 [N("Netmask"), \$intf->{"eth$_"}{NETMASK}],
			 [N("Boot Protocol"), \$intf->{"eth$_"}{BOOTPROTO}, ["static", "dhcp", "bootp"]],
			 [N("Started on boot"), \$intf->{"eth$_"}{ONBOOT} , ["yes", "no"]],
			 [N("DHCP client"), \$netcnx->{dhcp_client}]
			);
	my $i = 0;
	foreach my $j (@conf_data) {
	    my $l = new Gtk2::Label($j->[0]);
	    $l->set_justify('left');
	    $infos[2*$i] = gtkpack_(Gtk2::HBox->new,
                                 1);
	    $vbox_local->pack_start($infos[2*$i],0,0,0);
	    if (defined $j->[2]) {
		my $c = new Gtk2::OptionMenu;
		$c->set_popdown_strings(@{$j->[2]});
		$infos[2*$i+1] = $c->entry;
		$infos[2*$i]->pack_start($c,0,0,0);
	    } else {
		$infos[2*$i+1] = new Gtk2::Entry();
		$infos[2*$i]->pack_start($infos[2*$i+1],0,0,0);
	    }
	    $infos[2*$i+1]->set_text(${$j->[1]});
	    $i++;
	}
	my $c = $_;
	my $widget_temp;
	if (-e "$prefix/etc/sysconfig/network-scripts/ifcfg-eth$c") {
	    $widget_temp = gtksignal_connect(new Gtk2::Button(ethisup($c) ? N("deactivate now") : N("activate now")),
					     clicked => sub {
						 system("/sbin/if" . (ethisup($c) ? "down" : "up") . " eth$c");
						 ugtk2::gtkbuttonset($_[0], ethisup($c) ? N("deactivate now") : N("activate now"));
					     });
	} else {
	    $widget_temp = N("This interface has not been configured yet.\nLaunch the configuration wizard in the main window");
	}
	$vbox_local->pack_start(gtkpack__(new Gtk2::HBox(0,0),
					  $widget_temp
					 ),0,0,0);
	#	$list->append($_+1, "eth$_", $intf->{"eth$_"}{IPADDR}, $intf->{"eth$_"}{BOOTPROTO}, $all_cards[$_]->[1]);
	#	$list->set_selectable($_, 0);
	$notebook->append_page($vbox_local, Gtk2::Label->new("eth$_"));
    }
    my $bbox8 = new Gtk2::HButtonBox;
    $vbox0->pack_start($bbox8,0,0,10);
    $bbox8->set_layout('end');
    my $button_ok = Gtk2::Button->new_from_stock('gtk-ok');
    $button_ok->signal_connect(clicked => sub {
	foreach (0..$#all_cards) {
	    my @infos = @{$card_tab[2*$_]};
	    each_index {
		${$_->[1]} = $infos[2*$::i+1]->get_text;
	    } @{$card_tab[2*$_+1]};
	    if ($intf->{"eth$_"}{BOOTPROTO} eq "dhcp") {
		delete @{$intf->{"eth$_"}}{qw(IPADDR NETWORK NETMASK BROADCAST)};
	    }
	}
	update();
	$button_apply->set_sensitive(1);
	$window->destroy; Gtk2->main_quit;
    });
    $window->action_area->pack_start(gtkpack(Gtk2::HButtonBox->new,
                                             gtksignal_connect(Gtk2::Button->new_from_stock('gtk-cancel'),
                                                               clicked => sub { $window->destroy; Gtk2->main_quit }),
                                             $button_ok,
                                            ),
                                     1, 1, 0,
                                     );

    $window->show_all;
    foreach (0..$#all_cards) {
	my @infos = @{$card_tab[2*$_]};
	$intf->{"eth$_"}{BOOTPROTO} eq "dhcp" or $infos[8]->hide;
    }
    $window->run;
}


sub configure_net {
    my ($_prefix, $netcnx, $netc, $_intf) = @_;
    if (!$netcnx->{type}) {
	my $dialog = _create_dialog(N("LAN configuration"));
	$dialog->vbox->pack_start(new Gtk2::Label(N("You don't have an Internet connection.
Create one first by clicking on 'Configure'")),1,1,0);
	my $bbox_dialog = new Gtk2::HButtonBox;
	$dialog->action_area->add($bbox_dialog);
	$bbox_dialog->set_layout('end');
	my $button_ok = Gtk2::Button->new_from_stock('gtk-ok');
	$button_ok->signal_connect(clicked => sub {
					 Gtk2->main_quit;
				     });
	$bbox_dialog->add($button_ok);
	$dialog->show_all;
	$dialog->run;
	$dialog->destroy;
	return;
    }
    my $cnx = {};
    $cnx = $netcnx->{$netcnx->{type}};
    my $window = _create_dialog(N("Internet connection configuration"));
    $window->signal_connect(delete_event => sub { Gtk2->main_quit });
    $window->set_border_width(10);

    my $vbox2 = new Gtk2::VBox(0,0);
    my $i = 0;
    my @mask;
@mask = (0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0) if $netcnx->{type} eq 'lan';
@mask = (0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1) if $netcnx->{type} eq 'isdn_internal' && defined $cnx->{vendor} && defined $cnx->{id};
@mask = (1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1) if $netcnx->{type} eq 'isdn_internal' && (!defined $cnx->{vendor} || !defined $cnx->{id});
@mask = (0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0) if $netcnx->{type} eq 'modem' || $netcnx->{type} eq 'isdn_external';
@mask = (0,0,0,0,0,0,1,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0) if $netcnx->{type} =~ /adsl/;
@mask = (0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0) if $netcnx->{type} eq 'cable';

    #- duplicated code (waiting for 9.1 to be out to merge everything correctly, avoid bug elsewhere).
    if ($netcnx->{type} =~ /adsl/) {
	require network::adsl;
	network::adsl::adsl_probe_info($cnx, $netc, $intf);
    }
    my @conf_data = ([ N("Card IRQ"), \$cnx->{irq} ],
		     [ N("Card mem (DMA)"), \$cnx->{mem} ],
		     [ N("Card IO"), \$cnx->{io} ],
		     [ N("Card IO_0"), \$cnx->{io0} ],
		     [ N("Card IO_1"), \$cnx->{io1} ],
		     [ N("Your personal phone number"), \$cnx->{phone_in} ],
		     [ N("Provider name (ex provider.net)"), \$netc->{DOMAINNAME2} ],
		     [ N("Provider phone number"), \$cnx->{phone_out} ],
		     [ N("Provider dns 1 (optional)"), \$netc->{dnsServer2} ],
		     [ N("Provider dns 2 (optional)"), \$netc->{dnsServer3} ],
		     [ N("Account Login (user name)"), \$cnx->{login} ],
		     [ N("Account Password"), \$cnx->{passwd} ],
		     [ N("Dialing mode"), \$cnx->{dialing_mode}, [ "auto", "manual" ] ],
		     [ N("Gateway"), \$netc->{GATEWAY} ],
		     [ N("Connection name"), \$cnx->{connection} ],
		     [ N("Phone number"), \$cnx->{phone} ],
		     [ N("Login ID"), \$cnx->{login} ],
		     [ N("Password"), \$cnx->{passwd} ],
		     [ N("Authentication"), \$cnx->{auth}, [ N("PAP"), N("Terminal-based"), N("Script-based"), N_("CHAP") ] ],
		     [ N("Domain name"), \$cnx->{domain} ],
		     [ N("First DNS Server (optional)"), \$cnx->{dns1} ],
		     [ N("Second DNS Server (optional)"), \$cnx->{dns2} ],
		     [ N("Ethernet Card"), \$netc->{NET_DEVICE}, [ 'eth0', 'eth1', 'eth2', 'eth3', 'eth4', 'eth5', 'eth6', 'eth7', 'eth8', 'eth9' ] ],
		     [ N("DHCP Client"), \$netcnx->{dhcp_client}, ["dhcp-client", "dhcpcd", "dhcpxd"] ],
		     [ N("Connection speed"), \$cnx->{speed}, ["64 Kb/s", "128 Kb/s"] ],
		     [ N("Connection timeout (in sec)"), \$cnx->{huptimeout} ]
);
    my @infos;
    foreach (@conf_data) {
        if (!$mask[$i]) {
            $i++;
            next;
        }
        $infos[2*$i] = new Gtk2::HBox(0,0);
        my $l = new Gtk2::Label($_->[0]);
        $l->set_justify('left');
        $infos[2*$i]->pack_start($l, 0, 0, 0);
        $vbox2->pack_start($infos[2*$i], 0, 0, 0);
        if (defined $_->[2]) {
            my $c = new Gtk2::Combo();
            $c->set_popdown_strings(@{$_->[2]});
            $infos[2*$i+1] = $c->entry;
            $infos[2*$i]->pack_start($c,0 , 0, 0);
        } else {
            $infos[2*$i+1] = new Gtk2::Entry();
            $infos[2*$i]->pack_start($infos[2*$i+1], 0, 0, 0);
            #hide password if Entry Password
            if ($_->[0] eq N("Account Password") || $_->[0] eq N("Password")) { $infos[2*$i+1]->set_visibility(0) };
        }
        $infos[2*$i+1]->set_text(${$_->[1]});
        $i++;
    }


    $window->vbox->pack_start(gtkpack__(new Gtk2::VBox(0, 0),
                                        new Gtk2::Label(N("Internet Connection Configuration")),
                                        new Gtk2::HSeparator,
                                            my $table1 = create_packtable({ col_spacings => 5, row_spacings => 5, homogenous => 1 },
                                                                          [ Gtk2::Label->new(N("Profile: ")), 
                                                                            Gtk2::Label->new(translate($netcnx->{PROFILE})) ],
                                                                          [ Gtk2::Label->new(N("Connection type: ")), 
                                                                            Gtk2::Label->new(translate($netcnx->{type})) ],
                                                                         ),
                                        new Gtk2::HSeparator,
                                        gtkadd(Gtk2::Frame->new(N("Parameters")), $vbox2),
                                       ),
                              1, 1, 0
                             );
    $window->action_area->pack_start(gtkpack(Gtk2::HButtonBox->new,
                                             gtksignal_connect(Gtk2::Button->new_from_stock('gtk-ok'), clicked => sub {
                                                                   each_index {
                                                                       ${$conf_data[$::i][1]} = $infos[2*$::i+1]->get_text if $_;
                                                                   } @mask;
                                                                   update();
                                                                   $button_apply->set_sensitive(1);
                                                                   $window->destroy; Gtk2->main_quit;
                                                               }),
                                             gtksignal_connect(Gtk2::Button->new_from_stock('gtk-cancel'),
                                                               clicked => sub { $window->destroy; Gtk2->main_quit })
                                            ),
                                     1, 1, 0
                                    );

    $window->show_all;
    $window->run;
}
