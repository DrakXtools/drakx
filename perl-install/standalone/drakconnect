#!/usr/bin/perl

# DrakConnect

# Copyright (C) 1999-2002 MandrakeSoft (damien@mandrakesoft.com)
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2, or (at your option)
# any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

use lib qw(/usr/lib/libDrakX);

use standalone;     #- warning, standalone must be loaded very first, for 'explanations'

use interactive;
use common;
use network::netconnect;
use network::ethernet;
use network::tools;
use network::modem;
use network;
use c;
use modules;
use network::isdn;
use network::adsl;
use MDK::Common::Globals "network", qw($in $prefix $disconnect_file $connect_prog $connect_file $disconnect_file);

my $xpm_path = "/usr/share/libDrakX/pixmaps";
local $_ = join '', @ARGV;
$::isWizard = /--wizard/;

my $netcnx = {};
my $netc = {};
my $intf = {};
my @conx_type = ('modem', 'isdn_internal', 'isdn_external', 'adsl', 'cable', 'lan');

#$::wizard_xpm = "/usr/share/pixmaps/internet.xpm";

my $in = 'interactive'->vnew('su', 'network');
!$::isEmbedded && $in->isa('interactive::gtk') and $::isWizard = 1;
$::Wizard_pix_up = "wiz_drakconnect.png";
$::Wizard_title = "Network & Internet Configuration";

MDK::Common::Globals::init(
	      in => $in,
	      prefix => '',
	      connect_file => "/etc/sysconfig/network-scripts/net_cnx_up",
	      disconnect_file => "/etc/sysconfig/network-scripts/net_cnx_down",
	      connect_prog => "/etc/sysconfig/network-scripts/net_cnx_pg"
	     );

$::isEmbedded && ref($in) =~ /gtk/ or goto dd;
require ugtk2;
import ugtk2 qw(:helpers :wrappers);
my $expert_mode = 0;
network::netconnect::read_net_conf('', $netcnx, $netc);
modules::load_category('net');
my @all_cards = network::ethernet::conf_network_card_backend($netc, $intf, undef, undef, undef, undef);
network::netconnect::load_conf($netcnx, $netc, $intf);

my $window1 = ugtk2->new('drakconnect');
$window1->{rwindow}->signal_connect(delete_event => sub { ugtk2->exit(0) });
unless ($::isEmbedded) {
    $window1->{rwindow}->set_position('center');
    $window1->{rwindow}->set_title(N("Network configuration (%d adapters)", @all_cards));
    $window1->{rwindow}->set_size_request(500, 400);
}
$window1->{rwindow}->set_border_width(10);
my $vbox1 = new Gtk2::VBox(0,10);
$window1->{window}->add($vbox1);
my $hbox1 = new Gtk2::HBox(0,0);
$vbox1->pack_start($hbox1,0,0,0);
$hbox1->pack_start(new Gtk2::Label(N("Profile: ")),0,0,0);

my $combo1 = new Gtk2::Combo;
$combo1->set_popdown_strings(network::netconnect::get_profiles());
my $old_profile = $netcnx->{PROFILE};
$combo1->entry->set_text($netcnx->{PROFILE} || "default");
$combo1->entry->set_editable(0);
$hbox1->pack_start($combo1,0,0,0);
my $button_del = new Gtk2::Button(N("Del profile..."));
$button_del->signal_connect(clicked => sub {
				 my $dialog = new_dialog();
				 $dialog->vbox->pack_start(new Gtk2::Label(N("Profile to delete:")),1,1,0);
 				 my $combo_dialog = new Gtk2::Combo;
				 $combo_dialog->set_popdown_strings(grep { ! /default/ } network::netconnect::get_profiles());
				 $combo_dialog->entry->set_editable(0);
				 $dialog->vbox->pack_start($combo_dialog,1,1,0);
				 my $bbox_dialog = new Gtk2::HButtonBox;
				 $dialog->action_area->add($bbox_dialog);
				 $bbox_dialog->set_layout('end');
				 my $button_ok = new Gtk2::Button(N("OK"));
				 $button_ok->signal_connect(clicked => sub {
								  network::netconnect::del_profile($netcnx, $combo_dialog->entry->get_text());
								  $netcnx->{PROFILE} eq $combo_dialog->entry->get_text() and $netcnx->{PROFILE} = "default";
								  Gtk2->main_quit();
							      });
				 $bbox_dialog->add($button_ok);
				 my $button_cancel = new Gtk2::Button(N("Cancel"));
				 $button_cancel->signal_connect(clicked => sub { Gtk2->main_quit() });
				 $bbox_dialog->add($button_cancel);
				 $dialog->show_all;
				 $dialog->set_modal(1);
				 Gtk2->main();
				 $dialog->destroy;
				 $combo1->entry->set_text(-e "/etc/sysconfig/network-scripts/drakconnect_conf." . $combo1->entry->get_text ? $combo1->entry->get_text : "default");
				 $combo1->set_popdown_strings(network::netconnect::get_profiles());
				 apply();
			     });
$hbox1->pack_start($button_del,0,0,5);
$button_del->set_sensitive(network::netconnect::get_profiles() > 1);
my $button_new = new Gtk2::Button(N("New profile..."));
$button_new->signal_connect(clicked => sub {
				 my $dialog = new_dialog();
				 $dialog->vbox->pack_start(new Gtk2::Label(N("Name of the profile to create (the new profile is created as a copy of the current one) :")),1,1,0);
				 my $entry_dialog = new Gtk2::Entry;
				 $dialog->vbox->pack_start($entry_dialog,1,1,0);
				 my $bbox_dialog = new Gtk2::HButtonBox;
				 $dialog->action_area->add($bbox_dialog);
				 $bbox_dialog->set_layout('end');
				 my $button_ok = new Gtk2::Button(N("OK"));
				 $button_ok->signal_connect(clicked => sub {
								  network::netconnect::add_profile($netcnx, $entry_dialog->get_text());
								  $netcnx->{PROFILE} = $entry_dialog->get_text();
								  Gtk2->main_quit();
							      });
				 $bbox_dialog->add($button_ok);
				 my $button_cancel = new Gtk2::Button(N("Cancel"));
				 $button_cancel->signal_connect(clicked => sub { Gtk2->main_quit() });
				 $bbox_dialog->add($button_cancel);
				 $dialog->show_all;
				 $dialog->set_modal(1);
				 Gtk2->main();
				 $dialog->destroy;
				 $combo1->entry->set_text(-e "/etc/sysconfig/network-scripts/drakconnect_conf." . $netcnx->{PROFILE} ? $netcnx->{PROFILE} : "default");
				 $combo1->set_popdown_strings(network::netconnect::get_profiles());
});
$hbox1->pack_start($button_new,0,0,5);
my $hbox2 = new Gtk2::HBox(0,0);
$vbox1->pack_start($hbox2,0,0,0);
$hbox2->pack_start(new Gtk2::Label(N("Hostname: ")),0,0,0);
my $hostname = chomp_(`hostname`);
my $label_host = new Gtk2::Label($hostname);
$hbox2->pack_start($label_host,0,0,0);

#$vbox1->pack_start(new Gtk2::HSeparator,1,1,5);

my $frame1 = new Gtk2::Frame(N("Internet access"));
$vbox1->pack_start($frame1,1,1,0);
my $vbox_frame1 = new Gtk2::VBox(0,0);
$vbox_frame1->set_border_width(5);
$frame1->add($vbox_frame1);
my $table1 = new Gtk2::Table(3,3, 0);
$table1->set_border_width(5);
$table1->set_row_spacings(5);
$table1->set_col_spacings(5);
#$table1->set_border_width(10);
$vbox_frame1->pack_start($table1,1,1,0);
#attach(table, child, left_attach, right_attach, top_attach, bottom_attach, xoptions, yoptions, xpadding, ypadding)
#$table->attach($button[0], 0, 1, 0, 1, {expand=>1,fill=>1}, {expand=>1,fill=>1},0,0);
$table1->attach(new Gtk2::Label(N("Type:")), 0, 1, 0, 1, 'fill', 'fill',0,0);
my $label4 = new Gtk2::Label($netcnx->{type});
$table1->attach($label4, 1, 2, 0, 1, 'fill', 'fill',0,0);
my $label5 = new Gtk2::Label($netcnx->{type} eq 'lan' ? N("Gateway:") : N("Interface:"));
$table1->attach($label5, 0, 1, 1, 2, 'fill', 'fill',0,0);
my $label6 = new Gtk2::Label($netcnx->{type} eq 'lan' ? $netc->{GATEWAY} : $netcnx->{NET_INTERFACE});
$table1->attach($label6, 1, 2, 1, 2, 'fill', 'fill',0,0);
my $isconnected = -1;
#-sub connected_local {
#-    print "in connected local\n";
#-    my $w = $in->wait_message('', N("Testing your connection..."), 1);
#-    gtkflush();
#-    $isconnected = connected();
#-}
my $label7 = new Gtk2::Label(N("Status:"));
$table1->attach($label7, 0, 1, 2, 3, 'fill', 'fill',0,0);
my $label8 = new Gtk2::Label(N("Testing your connection..."));
$table1->attach($label8, 1, 2, 2, 3, 'fill', 'fill',0,0);

my $warning_label1 = new Gtk2::Label("");
$vbox_frame1->pack_start($warning_label1,0,0,0);
my $button2 = new Gtk2::Button(N("Wait please"));
$button2->set_sensitive(0);
$button2->signal_connect(clicked => sub {
			     if (!$isconnected && cat_($connect_prog) =~ m|/usr/bin/kppp| && -e '/usr/bin/kppp') {
				 run_program::rooted($prefix, "/usr/bin/kppp &");
			     } elsif (!$isconnected) {
				 connect_backend();
			     } else {
				 disconnect_backend();
			     }
			     update2();
			 });

$table1->attach($button2, 2, 3, 2, 3, 'fill', 'fill',0,0);

#$table1->attach($button1, 2, 3, 1, 2, 'fill', 'fill',0,0);

my $hbox_frame1_button = new Gtk2::HBox(0,0);
my $button1 = new Gtk2::Button(N("Configure Internet Access..."));
$button1->signal_connect(clicked => [ \&configure_net, '', $netcnx, $netc, $intf ]);
$hbox_frame1_button->pack_start($button1, 0, 0, 0);
$vbox_frame1->pack_start($hbox_frame1_button,0,0,0);

#$vbox1->pack_start(new Gtk2::HSeparator,1,1,5);

my $frame2 = new Gtk2::Frame(N("LAN configuration"));
$vbox1->pack_start($frame2,1,1,0);
my $vbox2 = new Gtk2::VBox(0,0);
$vbox2->set_border_width(5);
$frame2->add($vbox2);

my $tree_model = Gtk2::TreeStore->new(Gtk2::GType->OBJECT, map { Gtk2::GType->STRING } 2..6);
my $list = Gtk2::TreeView->new_with_model($tree_model);
$list->append_column(Gtk2::TreeViewColumn->new_with_attributes(undef, Gtk2::CellRendererPixbuf->new, 'pixbuf' => 0));
each_index { $list->append_column(Gtk2::TreeViewColumn->new_with_attributes($_, Gtk2::CellRendererText->new, 'text' => $::i + 1)) } (N("Interface"), N("IP address"), N("Protocol"), N("Driver"), N("State"));

#TV $list->set_column_auto_resize($_,1) foreach (0..4);
#TV $list->column_titles_passive();
#TV $list->set_shadow_type('etched_out');
$vbox2->pack_start($list, 0, 0, 5);
#$scrolled1->add_with_viewport($table2);

my $ip_regexp = qr/(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/;

build_list();

my $hbox3 = new Gtk2::HBox(0,0);
my $button3 = new Gtk2::Button(N("Configure Local Area Network..."));
$button3->signal_connect(clicked => [ \&configure_lan, '', $netcnx, $netc, $intf ]);
$hbox3->pack_start($button3, 0, 0, 0);
$vbox2->pack_start($hbox3, 0, 0, 0);

#$vbox1->pack_start(new Gtk2::HSeparator,0,0,5);

my $bbox0 = new Gtk2::HButtonBox;
$vbox1->pack_start($bbox0,0,0,0);
$bbox0->set_layout('end');


$bbox0->add(new Gtk2::Label(N("Click here to launch the wizard ->")));
my $button_wizard = new Gtk2::Button(N("Wizard..."));
$button_wizard->signal_connect(clicked => sub {
				     $::isWizard = 1;
				     system("drakconnect --wizard");
# netconnect::intro('', $netcnx, $in);
				     $combo1->entry->set_text(-e "/etc/sysconfig/network-scripts/drakconnect_conf." . $combo1->entry->get_text ? $combo1->entry->get_text : "default");
				     network::netconnect::load_conf($netcnx, $netc, $intf);
				     update();
				 });
$bbox0->add($button_wizard);

$vbox1->pack_start(new Gtk2::HSeparator,0,0,5);

my $bbox1 = new Gtk2::HButtonBox;
$vbox1->pack_start($bbox1,0,0,0);
$bbox1->set_layout('end');
#$bbox1->set_border_width(5);

my $button_expert = new Gtk2::Button(N("Expert Mode"));
$button_expert->signal_connect(clicked => sub {
				     foreach ($button1, $button3) { $expert_mode ? $_->hide() : $_->show() }
				     $button_expert->child->set($expert_mode ? N("Expert Mode") : N("Normal Mode"));
				     $expert_mode = !$expert_mode;
				 });
$bbox1->add($button_expert);

my $button_apply = new Gtk2::Button(N("Apply"));
$button_apply->signal_connect(clicked => sub {
				 apply();
			     });
$button_apply->set_sensitive(0);
$bbox1->add($button_apply);

my $button_cancel = new Gtk2::Button(N("Cancel"));
$button_cancel->signal_connect(clicked => sub {
				     $combo1->entry->set_text($old_profile);
				     update();
				     quit_global();
				 });
$bbox1->add($button_cancel);
my $button_ok = new Gtk2::Button(N("OK"));
$button_ok->signal_connect(clicked => sub {
				 my $dialog = new_dialog();
				 my $label = new Gtk2::Label(N("Please Wait... Applying the configuration"));
				 $dialog->vbox->pack_start($label,1,1,20);
				 $dialog->show_all;
				 gtkflush();
				 apply();
				 $dialog->destroy;
				 update();
				 quit_global();
			     });
$bbox1->add($button_ok);
$combo1->entry->signal_connect('changed', sub {
#				    connected() and disconnect_backend();
				    network::netconnect::set_profile($netcnx, $combo1->entry->get_text());
				    network::netconnect::load_conf($netcnx, $netc, $intf);
				    $netcnx->{$_} = $netc->{$_} foreach qw(NET_DEVICE NET_INTERFACE);
				    network::netconnect::set_net_conf($netcnx, $netc);
				    update();
				    $button_apply->set_sensitive(1);
				});

$window1->{rwindow}->show_all();
$_->hide foreach $button1, $button3;
gtkflush();
$::isEmbedded and kill 'USR2', $::CCPID;
my $tag = Gtk2->timeout_add(4000, \&update2);
$window1->main;
ugtk2->exit(0);

dd:
network::netconnect::intro('', $netcnx, $in);
$in->exit(0);

sub build_list {
    foreach my $i (0..$#all_cards) {
	my ($ip, $state);
	if (-e "/sbin/ifconfig") {
	    local $_ = `LC_ALL=C LANG=C LANGUAGE=C LC_MESSAGES=C /sbin/ifconfig "eth$i"`;
	    /inet addr\:$ip_regexp/; $ip = if_($1 && $2 && $3, "$1.$2.$3.$4");
	    $_ = `LC_ALL=C LANG=C LANGUAGE=C LC_MESSAGES=C /sbin/ifconfig`;
	    $state = /eth$i/ ? "up" : "down";
	} else { $ip = $intf->{"eth$_"}{IPADDR}; $state = "n/a" }
        $tree_model->append_set(undef, [ map_index { $::i => $_ } (gtkcreate_pixbuf("eth_card_mini2.png"), "eth$i", $ip , $intf->{"eth$i"}{BOOTPROTO}, $all_cards[$i][1], $state) ])->free;
#TV	$list->set_selectable($i, 0);
    }
}

sub apply {
    $old_profile = $netcnx->{PROFILE} || "default";
    network::netconnect::save_conf($netcnx, $netc, $intf);

    $netcnx->{type} eq 'modem' and network::modem::ppp_configure($in, $netcnx->{$netcnx->{type}}, '');
    $netcnx->{type} eq 'isdn_internal' and network::isdn::isdn_write_config_backend($netcnx->{$netcnx->{type}}, 1, $netc, $netcnx); #$light
    $netcnx->{type} eq 'isdn_external' and network::modem::ppp_configure($in, $netcnx->{$netcnx->{type}}, '');
    my $a = $netcnx->{type};
    $a =~ s/adsl_//;
    $netcnx->{type} =~ /adsl/ and network::adsl::adsl_conf_backend($netcnx->{$netcnx->{type}}, $netc, $a, $netcnx);

    $netcnx->{dhcp_client} and $netc->{dhcp_client} = $netcnx->{dhcp_client};
    network::configureNetwork2($in, $prefix, $netc, $intf);
    $netcnx->{type} =~ /adsl/ or system("/sbin/chkconfig --del adsl 2> /dev/null");
    $netcnx->{type} !~ /adsl_p/ and system("$prefix/etc/rc.d/init.d/network restart");
    $button_apply->set_sensitive(0);
}

sub ethisup { `LC_ALL=C LANG=C LANGUAGE=C LC_MESSAGES=C /sbin/ifconfig` =~ /eth$_[0]/ }

my $to_update;
sub update {
    my $h = chomp_(`hostname`);
    $label_host->set($h);
    $label4->set($netcnx->{type});
    $label5->set($netcnx->{type} eq 'lan' ? N("Gateway:") : N("Interface:"));
    $label6->set($netcnx->{type} eq 'lan' ? $netc->{GATEWAY} : $netcnx->{NET_INTERFACE});
#TV    $list->window->freeze();
    $tree_model->clear;
    build_list();
#TV    $list->window->thaw();
    $button_del->set_sensitive(network::netconnect::get_profiles() > 1);
    return 1 if $isconnected == -1;
    $label8->set($isconnected ? N("Connected") : N("Not connected"));
    $button2->child->set($isconnected ? N("Disconnect...") : N("Connect..."));
    $button2->set_sensitive(1);
    1;
}

sub in_ifconfig {
    my ($intf) = @_;
    -e '/sbin/ifconfig' or return 1;
    $intf eq '' and return 1;
    `/sbin/ifconfig` =~ /$intf/;
}

sub update2 {
    undef $to_update;
    connected_bg(\$to_update);
    if (defined $to_update) {
        $isconnected = $to_update;
        if ($isconnected != -1) {
            if ($isconnected && !in_ifconfig($netcnx->{NET_INTERFACE})) {
                $warning_label1->set(N("Warning, another Internet connection has been detected, maybe using your network"));
                $isconnected = 0;
            } else { $warning_label1->set("") }
            $label8->set($isconnected ? N("Connected") : N("Not connected"));
            $button2->child->set($isconnected ? N("Disconnect...") : N("Connect..."));
            $button2->set_sensitive(1);
        }
    }
    update();
    1;
}

sub quit_global {
    ugtk2->exit(0);
}

sub configure_lan {
    my (undef, $prefix, $netcnx, undef, $intf) = @_;
    my $window = Gtk2::Window->new('toplevel');

    my @card_tab;

    if (@all_cards < 1) {
	my $dialog = new_dialog();
	$dialog->vbox->pack_start(new Gtk2::Label(N("You don't have any configured interface.
Configure them first by clicking on 'Configure'")),1,1,0);
	my $bbox_dialog = new Gtk2::HButtonBox;
	$dialog->action_area->add($bbox_dialog);
	$bbox_dialog->set_layout('end');
	my $button_ok = new Gtk2::Button(N("OK"));
	$button_ok->signal_connect(clicked => sub { Gtk2->main_quit() });
	$bbox_dialog->add($button_ok);
	$dialog->show_all;
	$dialog->set_modal(1);
	Gtk2->main();
	$dialog->destroy;
	return;
    }

    $window->signal_connect(delete_event => sub { Gtk2->main_quit });
    $window->set_position('center');
    $window->set_title(N("LAN configuration"));
    $window->set_border_width(10);
    my $vbox1 = new Gtk2::VBox(0,0);
    $window->add($vbox1);
    $vbox1->pack_start(new Gtk2::Label(N("LAN Configuration")),0,1,0);
    my $notebook = new Gtk2::Notebook;
    $vbox1->pack_start($notebook,0,1,0);
    foreach (0..$#all_cards) {
	my @infos;
	my @conf_data;
	$card_tab[2*$_] = \@infos;
	$card_tab[2*$_+1] = \@conf_data;
	my $vbox_local = new Gtk2::VBox(0,0);
	$vbox_local->set_border_width(10);
	$vbox_local->pack_start(new Gtk2::Label(N("Adapter %s: %s", $_+1 , "eth$_")),1,1,0);
	#	Eth${_}Hostname = $netc->{HOSTNAME}
	#       Eth${_}HostAlias = " . do { $netc->{HOSTNAME} =~ /([^\.]*)\./; $1 } . "
	#	Eth${_}Driver = $all_cards[$_]->[1]
        @conf_data = ([N("IP address"), \$intf->{"eth$_"}{IPADDR}],
			 [N("Netmask"), \$intf->{"eth$_"}{NETMASK}],
			 [N("Boot Protocol"), \$intf->{"eth$_"}{BOOTPROTO}, ["static", "dhcp", "bootp"]],
			 [N("Started on boot"), \$intf->{"eth$_"}{ONBOOT} , ["yes", "no"]],
			 [N("DHCP client"), \$netcnx->{dhcp_client}]
			);
	my $i = 0;
	foreach my $j (@conf_data) {
	    $infos[2*$i] = new Gtk2::HBox(0,0);
	    my $l = new Gtk2::Label($j->[0]);
	    $l->set_justify('left');
	    $infos[2*$i]->pack_start($l,1,1,0);
	    $vbox_local->pack_start($infos[2*$i],0,0,0);
	    if (defined $j->[2]) {
		my $c = new Gtk2::Combo();
		$c->set_popdown_strings(@{$j->[2]});
		$infos[2*$i+1] = $c->entry;
		$infos[2*$i+1]->set_editable(0);
		$infos[2*$i]->pack_start($c,0,0,0);
	    } else {
		$infos[2*$i+1] = new Gtk2::Entry();
		$infos[2*$i]->pack_start($infos[2*$i+1],0,0,0);
	    }
	    $infos[2*$i+1]->set_text(${$j->[1]});
	    $i++;
	}
	my $c = $_;
	my $widget_temp;
	if (-e "$prefix/etc/sysconfig/network-scripts/ifcfg-eth$c") {
	    $widget_temp = gtksignal_connect(new Gtk2::Button(ethisup($c) ? N("deactivate now") : N("activate now")),
					     clicked => sub {
						 system("/sbin/if" . (ethisup($c) ? "down" : "up") . " eth$c");
						 gtkbuttonset($_[0], ethisup($c) ? N("deactivate now") : N("activate now"));
					     });
	} else {
	    $widget_temp = N("This interface has not been configured yet.\nLaunch the configuration wizard in the main window");
	}
	$vbox_local->pack_start(gtkpack__(new Gtk2::HBox(0,0),
					  $widget_temp
					 ),0,0,0);
	#	$list->append($_+1, "eth$_", $intf->{"eth$_"}{IPADDR}, $intf->{"eth$_"}{BOOTPROTO}, $all_cards[$_]->[1]);
	#	$list->set_selectable($_, 0);
#	require Data::Dumper;
#	print "------------\n" . Data::Dumper->Dump([$b],['b']) . "\n";
	my $hbox_local = new Gtk2::HBox(0,0);
	my $pix = gtkpng("/usr/share/libDrakX/pixmaps/eth_card_mini.png");
	$hbox_local->pack_start($pix,0,0,0);
	$hbox_local->pack_start(new Gtk2::Label("eth$_"),0,0,0);
	$hbox_local->show_all;
	$notebook->append_page($vbox_local, $hbox_local);
    }
    my $bbox1 = new Gtk2::HButtonBox;
    $vbox1->pack_start($bbox1,0,0,10);
    $bbox1->set_layout('end');
    my $button_ok = new Gtk2::Button(N("OK"));
    $button_ok->signal_connect(clicked => sub {
				     foreach (0..$#all_cards) {
					 my @infos = @{$card_tab[2*$_]};
                          each_index {
					     ${$_->[1]} = $infos[2*$::i+1]->get_text();
                          } @{$card_tab[2*$_+1]};
				     }
				     update();
				     $button_apply->set_sensitive(1);
				     $window->destroy(); Gtk2->main_quit;
				 });
    $bbox1->add($button_ok);

    my $button_cancel = new Gtk2::Button(N("Cancel"));
    $button_cancel->signal_connect(clicked => sub { $window->destroy(); Gtk2->main_quit });
    $bbox1->add($button_cancel);

    $window->set_modal(1);
    $window->show_all();
    foreach (0..$#all_cards) {
	my @infos = @{$card_tab[2*$_]};
	$intf->{"eth$_"}{BOOTPROTO} eq "dhcp" or $infos[8]->hide;
    }
    $window->set_position('center_always');
    Gtk2->main;
}


sub configure_net {
    my (undef, $_prefix, $netcnx, $netc, $_intf) = @_;
    if (!$netcnx->{type}) {
	my $dialog = new_dialog();
	$dialog->vbox->pack_start(new Gtk2::Label(N("You don't have any internet connection.
Create one first by clicking on 'Configure'")),1,1,0);
	my $bbox_dialog = new Gtk2::HButtonBox;
	$dialog->action_area->add($bbox_dialog);
	$bbox_dialog->set_layout('end');
	my $button_ok = new Gtk2::Button(N("OK"));
	$button_ok->signal_connect(clicked => sub {
					 Gtk2->main_quit();
				     });
	$bbox_dialog->add($button_ok);
	$dialog->show_all;
	$dialog->set_modal(1);
	Gtk2->main();
	$dialog->destroy;
	return;
    }
    my $cnx = {};
    my @infos;
    $cnx = $netcnx->{$netcnx->{type}};
    my $window = Gtk2::Window->new('toplevel');
    $window->signal_connect(delete_event => sub { Gtk2->main_quit });
    $window->set_position('center');
    $window->set_title(N("Internet connection configuration"));
    $window->set_border_width(10);
    my $vbox1 = new Gtk2::VBox(0,0);
    $window->add($vbox1);
    $vbox1->pack_start(new Gtk2::Label(N("Internet Connection Configuration")),0,1,0);

    $vbox1->pack_start(new Gtk2::HSeparator,0,0,5);
    my $table1 = new Gtk2::Table(2, 4, 0);
    $table1->set_row_spacings(5);
    $table1->set_col_spacings(5);
    $vbox1->pack_start($table1,0,0,0);
    $table1->attach(new Gtk2::Label(N("Profile: ")), 0, 1, 0, 1, 'fill', 'fill',0,0);
    $table1->attach(new Gtk2::Label(translate($netcnx->{PROFILE})), 1, 2, 0, 1, 'fill', 'fill',0,0);
    $table1->attach(new Gtk2::Label(N("Connection type: ")), 0, 1, 1, 2, 'fill', 'fill',0,0);
    $table1->attach(new Gtk2::Label(translate($netcnx->{type})), 1, 2, 1, 2, 'fill', 'fill',0,0);
#    my $button1 = new Gtk2::Button(N("Reconfigure using wizard..."));
#    $table1->attach($button1, 2, 4, 0, 2, 'fill', 'fill',0,0);
    $vbox1->pack_start(new Gtk2::HSeparator,0,0,5);

    my $frame1 = new Gtk2::Frame(N("Parameters"));
    $vbox1->pack_start($frame1,1,1,0);
    my $vbox2 = new Gtk2::VBox(0,0);
    $frame1->add($vbox2);
    my $i = 0;

    my @conf_data = ([ N("Card IRQ"), \$cnx->{irq} ],
		     [ N("Card mem (DMA)"), \$cnx->{mem} ],
		     [ N("Card IO"), \$cnx->{io} ],
		     [ N("Card IO_0"), \$cnx->{io0} ],
		     [ N("Card IO_1"), \$cnx->{io1} ],
		     [ N("Your personal phone number"), \$cnx->{phone_in} ],
		     [ N("Provider name (ex provider.net)"), \$netc->{DOMAINNAME2} ],
		     [ N("Provider phone number"), \$cnx->{phone_out} ],
		     [ N("Provider dns 1 (optional)"), \$netc->{dnsServer2} ],
		     [ N("Provider dns 2 (optional)"), \$netc->{dnsServer3} ],
		     [ N("Account Login (user name)"), \$cnx->{login} ],
		     [ N("Account Password"), \$cnx->{passwd} ],
		     [ N("Dialing mode"), \$cnx->{dialing_mode}, [ "auto", "manual" ] ],
		     [ N("Gateway"), \$netc->{GATEWAY} ],
		     [ N("Connection name"), \$cnx->{connection} ],
		     [ N("Phone number"), \$cnx->{phone} ],
		     [ N("Login ID"), \$cnx->{login} ],
		     [ N("Password"), \$cnx->{passwd} ],
		     [ N("Authentication"), \$cnx->{auth}, [ N("PAP"), N("Terminal-based"), N("Script-based"), N_("CHAP") ] ],
		     [ N("Domain name"), \$cnx->{domain} ],
		     [ N("First DNS Server (optional)"), \$cnx->{dns1} ],
		     [ N("Second DNS Server (optional)"), \$cnx->{dns2} ],
		     [ N("Ethernet Card"), \$netc->{NET_DEVICE}, [ 'eth0', 'eth1', 'eth2', 'eth3', 'eth4', 'eth5', 'eth6', 'eth7', 'eth8', 'eth9' ] ],
		     [ N("DHCP Client"), \$netcnx->{dhcp_client}, ["dhcp-client", "dhcpcd", "dhcpxd"] ],
		     [ N("Connection speed"), \$cnx->{speed}, ["64 Kb/s", "128 Kb/s"] ],
		     [ N("Connection timeout (in sec)"), \$cnx->{huptimeout} ]
);
    foreach (@conf_data) {
	$infos[2*$i] = new Gtk2::HBox(0,0);
	my $l = new Gtk2::Label($_->[0]);
	$l->set_justify('left');
	$infos[2*$i]->pack_start($l,1,1,0);
	$vbox2->pack_start($infos[2*$i],0,0,0);
  	if (defined $_->[2]) {
	    my $c = new Gtk2::Combo();
	    $c->set_popdown_strings(@{$_->[2]});
	    $infos[2*$i+1] = $c->entry;
	    $infos[2*$i]->pack_start($c,0,0,0);
	} else {
	    $infos[2*$i+1] = new Gtk2::Entry();
	    $infos[2*$i]->pack_start($infos[2*$i+1],0,0,0);
	    #hide password if Entry Password
	    if ($_->[0] eq N("Account Password") || $_->[0] eq N("Password")) { $infos[2*$i+1]->set_visibility(0) };
	}
	$infos[2*$i+1]->set_text(${$_->[1]});
  	$i++;
    }
    my @mask;
@mask = (0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0) if $netcnx->{type} eq 'lan';
@mask = (0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1) if $netcnx->{type} eq 'isdn_internal' && defined $cnx->{vendor} && defined $cnx->{id};
@mask = (1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1) if $netcnx->{type} eq 'isdn_internal' && (!defined $cnx->{vendor} || !defined $cnx->{id});
@mask = (0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0) if $netcnx->{type} eq 'modem' || $netcnx->{type} eq 'isdn_external';
@mask = (0,0,0,0,0,0,1,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0) if $netcnx->{type} =~ /adsl/;
@mask = (0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0) if $netcnx->{type} eq 'cable';
    $vbox1->pack_start(new Gtk2::HSeparator,0,0,5);


    my $bbox1 = new Gtk2::HButtonBox;
    $vbox1->pack_start($bbox1,0,0,0);
    $bbox1->set_layout('end');
    my $button_ok = new Gtk2::Button(N("OK"));
    $button_ok->signal_connect(clicked => sub {
				     each_index {
					    ${$conf_data[$::i][1]} = $infos[2*$::i+1]->get_text() if $_;
				     } @mask;
				     update();
				     $button_apply->set_sensitive(1);
				     $window->destroy(); Gtk2->main_quit;
				 });
    $bbox1->add($button_ok);
    my $button_cancel = new Gtk2::Button(N("Cancel"));
    $button_cancel->signal_connect(clicked => sub { $window->destroy(); Gtk->main_quit });
    $bbox1->add($button_cancel);

    $window->set_modal(1);
    $window->show_all();
    each_index { $_ ? $infos[2*$::i]->show : $infos[2*$::i]->hide } @mask;
    Gtk2->main;
}

sub new_dialog {
    my $dialog = new Gtk2::Dialog();
    $dialog->set_position('center-on-parent');
    $dialog->vbox->set_border_width(10);
    $dialog->signal_connect(delete_event => sub { Gtk2->main_quit() });
    $dialog;
}
